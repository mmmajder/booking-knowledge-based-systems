package flightPrice;

import com.ftn.sbnz.backward.model.models.events.PreviewFlightEvent;
import com.ftn.sbnz.backward.model.models.events.AdditionalServicesRequestEvent;
import com.ftn.sbnz.backward.model.models.events.FlightPaymentRequestEvent;
import com.ftn.sbnz.backward.model.models.events.CheckSeatsEvent;
import com.ftn.sbnz.backward.model.models.flight.SeatClass;
import com.ftn.sbnz.backward.model.models.flight.price.BasePrice;
import com.ftn.sbnz.backward.model.models.flight.price.AdditionalServicesPrice;
import com.ftn.sbnz.backward.model.models.Payment;
import com.ftn.sbnz.backward.model.models.Customer
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgram;
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgramTier;
import java.util.Date
import java.util.ArrayList
import com.ftn.sbnz.backward.model.models.flight.PlaneSeat
import java.util.List
import com.ftn.sbnz.backward.model.models.flight.Flight;

rule "Calculate base price"
lock-on-active
    when
        $previewFlight: PreviewFlightEvent($flight: flight, $customer: customer, $numberOfAdults: numberOfAdults, $numberOfChildren: numberOfChildren, $seatClass: seatClass)
    then
        System.out.println("Calculate base price");
        double basePrice = 0.0;
        switch($seatClass) {
          case ECONOMY:
            basePrice += $flight.getPriceCatalog().getEconomyPrice();
            break;
          case PREMIUM:
            basePrice += $flight.getPriceCatalog().getPremiumPrice();
            break;
          case BUSINESS:
            basePrice += $flight.getPriceCatalog().getBusinessPrice();
            break;
          case FIRST:
            basePrice += $flight.getPriceCatalog().getFirstClassPrice();
            break;
          default:
            break;
        }
        double coefficientForNumberOfPassengers = $previewFlight.getNumberOfAdults() + $previewFlight.getNumberOfChildren() * (1 - $flight.getPriceCatalog().getDiscountForChildren());
        double discountForNumberOfPassengers =  $flight.getPriceCatalog().calculateDiscountForMultipleTickets($numberOfAdults + $numberOfChildren);
        double result = basePrice * coefficientForNumberOfPassengers * (1-discountForNumberOfPassengers);
        BasePrice price = new BasePrice();
        price.setSeatPrice(basePrice);
        price.setChildrenDiscount($flight.getPriceCatalog().getDiscountForChildren() * $numberOfChildren);
        price.setNumberOfChildren($numberOfChildren);
        price.setNumberOfAdults($numberOfAdults);
        price.setDiscountForNumberOfPassengers(basePrice * coefficientForNumberOfPassengers * discountForNumberOfPassengers);
        price.setTotalPrice(result);
        System.out.println(price);
        modify($previewFlight){setBasePrice(price)};
end


rule "calculate price of additional services"
    when
        $previewFlight: PreviewFlightEvent(basePrice != null, $flight1: flight, $customer: customer)
        $additionalServicesRequest: AdditionalServicesRequestEvent($customer.getEmail() == customer.getEmail(), flight.getId() == $flight1.getId(), $luggageWeight: luggageWeight, $isPriorityBoarding: priorityBoarding, $isSpecificSeats: specificSeats, $seats: seats)
    then
        System.out.println("calculate price of additional services");
        int numberOfPassengers = $previewFlight.getBasePrice().getNumberOfAdults() + $previewFlight.getBasePrice().getNumberOfChildren();
        System.out.println(numberOfPassengers);
        double luggagePrice = $flight1.getPriceCatalog().calculateLuggagePrice($luggageWeight / numberOfPassengers);
        double priorityBoardingPrice = ($additionalServicesRequest.isPriorityBoarding()) ? $flight1.getPriceCatalog().getPriorityBoardingPrice() * numberOfPassengers : 0;
        double specificSeatsPrice = ($additionalServicesRequest.isSpecificSeats()) ? $flight1.getPriceCatalog().getChooseSeatPrice() * $additionalServicesRequest.getSeats().size() : 0;

        AdditionalServicesPrice additionalServicesPrice = new AdditionalServicesPrice();
        additionalServicesPrice.setLuggagePrice(luggagePrice);
        additionalServicesPrice.setPriorityBoardingPrice(priorityBoardingPrice);
        additionalServicesPrice.setSpecificSeatsPrice(specificSeatsPrice);
        additionalServicesPrice.setTotalAdditionalPrice(luggagePrice + priorityBoardingPrice + specificSeatsPrice);
        System.out.println(additionalServicesPrice);
        modify($additionalServicesRequest){setAdditionalServicesPrice(additionalServicesPrice)};
end

rule "update price after loyalty program discount"
lock-on-active
    when
        $previewFlight: PreviewFlightEvent(basePrice != null, $flight1: flight, $customer: customer)
        $additionalServicesRequest: AdditionalServicesRequestEvent($customer.getEmail() == customer.getEmail(), flight.getId() == $flight1.getId(), additionalServicesPrice!=null)
        $c: Customer(loyaltyProgram!=null)
    then
        System.out.println("update price after loyalty program discount");
        double totalPrice = ($previewFlight.getBasePrice().getTotalPrice() + $additionalServicesRequest.getAdditionalServicesPrice().getTotalAdditionalPrice()) * (1 - $c.getLoyaltyProgram().getDiscount());

        FlightPaymentRequestEvent flightPaymentRequestEvent = new FlightPaymentRequestEvent();
        flightPaymentRequestEvent.setPreviewFlightEvent($previewFlight);
        flightPaymentRequestEvent.setAdditionalServicesRequestEvent($additionalServicesRequest);
        flightPaymentRequestEvent.setRequested(false);
        flightPaymentRequestEvent.setCustomer($c);
        flightPaymentRequestEvent.setTotalPrice(totalPrice);
        System.out.println(totalPrice);
        insert(flightPaymentRequestEvent);
end


rule "reserve ride"
    when
        $paymentRequest: FlightPaymentRequestEvent()
    then
        System.out.println("reserve ride");
        List<PlaneSeat> seats = $paymentRequest.getAdditionalServicesRequestEvent().getSeats();
        Flight flight = $paymentRequest.getPreviewFlightEvent().getFlight();
        CheckSeatsEvent checkSeatsEvent = new CheckSeatsEvent();
        checkSeatsEvent.setSeats(seats);
        checkSeatsEvent.setFlight(flight);
        checkSeatsEvent.setExecutionTime(new Date());
        insert(checkSeatsEvent);
//        insert(new CheckPriceEvent($paymentRequest))
end

rule "check seats"
    when
        $c: CheckSeatsEvent()
//        $paymentRequest: FlightPaymentRequestEvent()
    then
        System.out.println("check seats");
end
