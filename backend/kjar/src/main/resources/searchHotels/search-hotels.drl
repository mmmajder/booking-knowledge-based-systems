package searchHotels

import com.ftn.sbnz.backward.model.models.hotel.*;
import java.time.LocalDate;
import java.util.Date;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Collection;
import java.time.ZoneId;
import java.text.SimpleDateFormat;

global List<Hotel> filteredHotels;
global List<Hotel> popularHotels;

rule "Filter Hotels"
when
    $searchParams: SearchHotelsParams()
    $hotel: Hotel(
        name.toLowerCase().contains($searchParams.name.toLowerCase()),
        city.toLowerCase().contains($searchParams.destination.toLowerCase()) ||
        country.toLowerCase().contains($searchParams.destination.toLowerCase()),
        rating >= $searchParams.reviewScore,
        stars memberOf $searchParams.starRating || $searchParams.starRating.size() == 0,
        distanceFromCenter >= $searchParams.distanceStart,
        distanceFromCenter <= $searchParams.distanceEnd,
        $hotel.facilities.containsAll($searchParams.facilities) || $searchParams.facilities.size() == 0
    )
then
    insert(new CalculateHotelPrice($hotel, $searchParams));
end

rule "Calculate Hotel Price"
when
    $calculateHotelPrice: CalculateHotelPrice(
        $hotel: hotel,
        $searchParams: searchHotelsParams
    )
then
    // CALCULATE DISCOUNT
    double numOfNights = calculateNumberOfNights($searchParams.getStartDate(), $searchParams.getEndDate());
    double basicPrice = 10.0 * $hotel.getStars() * numOfNights;
    double mealPrice = ($searchParams.getNumAdults() + $searchParams.getNumChildren()) * 10.0 * numOfNights * $hotel.getStars();
    double totalPrice = basicPrice + mealPrice;

    // LAST MINUTE DISCOUNT
    int daysBeforeStay = calculateNumberOfNights(new Date(), $searchParams.getStartDate());
    double lastMinuteDiscount = holidayDiscount(daysBeforeStay, isHolidayPeriod($searchParams.getStartDate()));
    if(lastMinuteDiscount > 0.0) {
        totalPrice -= totalPrice * (lastMinuteDiscount / 100);
    }

    System.out.println($hotel.getName() + ": " + totalPrice);

    if(totalPrice >= $searchParams.getPriceRangeStart() && $searchParams.getPriceRangeEnd() >= totalPrice) {
        insert(new CheckRoomAvailability($hotel, $searchParams));
    }
end

rule "Available room"
when
     $checkRoomAvailability: CheckRoomAvailability()
then
     filteredHotels.add($checkRoomAvailability.getHotel());
end

rule "Hotel - Number of Views"
when
  $event: HotelEvent(hotelEventType == HotelEventType.VIEW, $user: user, $hotel: hotel)
//  accumulate(
//    $viewEvent: HotelEvent($hotel == hotel, hotelEventType == HotelEventType.VIEW) over window:time(5h),
//    $points: ( accumulate($v: $viewEvent; count($v) < 3), -1;
//               accumulate($v: $viewEvent; count($v) > 10), 1;
//               accumulate($v: $viewEvent; count($v) > 30), 5;
//               accumulate($v: $viewEvent; count($v) > 100), 10;
//               0 )
//  )
  $numberOfViews: Long() from accumulate(
      $v: HotelEvent($hotel == hotel, hotelEventType == HotelEventType.VIEW)
      over window: time(5h),
      count($v)
  )
then
    // TODO: numberOfViews -> points
    System.out.println("NUM OF VIEWS: " + $numberOfViews);
//  $hotel.addPoints($numberOfViews);
  insert(new ReloadPopularHotelsEvent());
end

rule "Hotel - Number of Bookings"
when
  $event: HotelEvent(hotelEventType == HotelEventType.RESERVATION, $user: user, $hotel: hotel)
    $numberOfViews: Long() from accumulate(
        $v: HotelEvent($hotel == hotel, hotelEventType == HotelEventType.RESERVATION)
        over window: time(24h),
        count($v)
    )
//  accumulate(
//    HotelEvent($hotel == hotel, hotelEventType == HotelEventType.BOOKING) over window:time(24h) from $events: List(),
//    $points: ( $events.size() > 3 ? 1 :
//               $events.size() > 10 ? 5 :
//               $events.size() > 15 ? 10 :
//               0 )
//  )
then
//  $hotel.addPoints($numberOfViews);
  insert(new ReloadPopularHotelsEvent());
end

rule "Hotel - Number of Positive Reviews"
when
  $event: HotelEvent(hotelEventType == HotelEventType.POSITIVE_REVIEW, $user: user, $hotel: hotel)
      $numberOfViews: Long() from accumulate(
          $v: HotelEvent($hotel == hotel, hotelEventType == HotelEventType.POSITIVE_REVIEW)
          over window: time(24h),
          count($v)
      )
//  accumulate(
//    HotelEvent($hotel == hotel, hotelEventType == HotelEventType.POSITIVE_REVIEW) over window:time(1h) from $events: List(),
//    $points: ( $events.size() > 3 ? 1 :
//               $events.size() > 5 ? 5 :
//               $events.size() > 10 ? 10 :
//               0 )
//  )
then
//  $hotel.addPoints($numberOfViews);
  insert(new ReloadPopularHotelsEvent());
end

rule "Hotel - Number of Negative Reviews"
when
  $event: HotelEvent(hotelEventType == HotelEventType.NEGATIVE_REVIEW, $user: user, $hotel: hotel)
       $numberOfViews: Long() from accumulate(
            $v: HotelEvent($hotel == hotel, hotelEventType == HotelEventType.NEGATIVE_REVIEW)
            over window: time(24h),
            count($v)
        )
//  accumulate(
//    HotelEvent($hotel == hotel, hotelEventType == HotelEventType.NEGATIVE_REVIEW) over window:time(24h) from $events: List(),
//    $points: ( $events.size() > 3 ? -5 :
//               $events.size() > 10 ? -$negativeReviews :
//               0 )
//  )
then
//  $hotel.addPoints($numberOfViews);
  insert(new ReloadPopularHotelsEvent());
end

rule "Sort and Select Top 10 Hotels"
when
  ReloadPopularHotelsEvent()
  $hotel: Hotel()
  not Hotel(this != $hotel, points > $hotel.points) // Ensure unique hotels with top points
then
  modify($hotel) {
    setPoints(-$hotel.getPoints()) // Negate points for descending order sorting
  };
  popularHotels.add($hotel);
end

//query "Get Top 10 Hotels"
//$hotels: List(size > 0) from accumulate(
//  $hotel: Hotel() from collect(Hotel() over window:length(10) from popularHotels),
//  init($hotels = new ArrayList<Hotel>()),
//  action($hotels.add($hotel)),
//  reverse
//)
//end

function double holidayDiscount(int daysBeforeStay, boolean holidayPeriod) {
    if (daysBeforeStay >= 16 && daysBeforeStay <= 25) {
        if (holidayPeriod) {
            return 5.0;
        } else {
            return 10.0;
        }
    } else if (daysBeforeStay >= 6 && daysBeforeStay <= 15) {
        if (holidayPeriod) {
            return 10.0;
        } else {
            return 15.0;
        }
    } else if (daysBeforeStay <= 5) {
        if (holidayPeriod) {
            return 15.0;
        } else {
            return 20.0;
        }
    }
    return 0.0;
}

function boolean isHolidayPeriod(Date date) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd");
    String formattedDate = dateFormat.format(date);
    String[] holidayPeriods = {
        "01-01", // New Year's Day
        "12-25", // Christmas
        "07-04", // Independence Day
        "10-31", // Halloween
        "11-11", // Veterans Day
    };

    for (String holiday : holidayPeriods) {
        if (formattedDate.equals(holiday)) {
            return true;
        }
    }
    return false;
}

function int calculateNumberOfNights(Date startD, Date endD) {
    LocalDate startDate = startD.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    LocalDate endDate = endD.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    long daysBetween = ChronoUnit.DAYS.between(startDate, endDate);
    return (int) daysBetween;
}
