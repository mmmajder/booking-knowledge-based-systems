package flightPrice;

import com.ftn.sbnz.backward.model.models.events.PreviewFlightEvent;
import com.ftn.sbnz.backward.model.models.events.AdditionalServicesRequestEvent;
import com.ftn.sbnz.backward.model.models.events.FlightPaymentRequestEvent;
import com.ftn.sbnz.backward.model.models.events.RemoveSeatPlaceEvent;
import com.ftn.sbnz.backward.model.models.flight.SeatClass;
import com.ftn.sbnz.backward.model.models.flight.price.BasePrice;
import com.ftn.sbnz.backward.model.models.flight.price.AdditionalServicesPrice;
import com.ftn.sbnz.backward.model.models.Payment;
import com.ftn.sbnz.backward.model.models.Customer
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgram;
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgramTier;
import java.util.Date
import java.util.ArrayList
import com.ftn.sbnz.backward.model.models.flight.PlaneSeat
import java.util.List
import com.ftn.sbnz.backward.model.models.flight.Flight
import com.ftn.sbnz.backward.model.models.flight.FlightTickets
import com.ftn.sbnz.backward.model.models.events.CheckRequestValidityEvent
import com.ftn.sbnz.backward.model.models.flight.PlaneBusyness
import java.util.Set;

rule "Calculate base price"
lock-on-active
    when
        $previewFlight: PreviewFlightEvent($flight: flight, $customer: customer, $numberOfAdults: numberOfAdults, $numberOfChildren: numberOfChildren, $seatClass: seatClass)
    then
        System.out.println("Calculate base price");
        double basePrice = 0.0;
        switch($seatClass) {
          case ECONOMY:
            basePrice += $flight.getPriceCatalog().getEconomyPrice();
            break;
          case PREMIUM:
            basePrice += $flight.getPriceCatalog().getPremiumPrice();
            break;
          case BUSINESS:
            basePrice += $flight.getPriceCatalog().getBusinessPrice();
            break;
          case FIRST:
            basePrice += $flight.getPriceCatalog().getFirstClassPrice();
            break;
          default:
            break;
        }
        double coefficientForNumberOfPassengers = $previewFlight.getNumberOfAdults() + $previewFlight.getNumberOfChildren() * (1 - $flight.getPriceCatalog().getDiscountForChildren());
        double discountForNumberOfPassengers =  $flight.getPriceCatalog().calculateDiscountForMultipleTickets($numberOfAdults + $numberOfChildren);
        double result = basePrice * coefficientForNumberOfPassengers * (1-discountForNumberOfPassengers);
        BasePrice price = new BasePrice();
        price.setSeatPrice(basePrice);
        price.setChildrenDiscount($flight.getPriceCatalog().getDiscountForChildren() * $numberOfChildren);
        price.setNumberOfChildren($numberOfChildren);
        price.setNumberOfAdults($numberOfAdults);
        price.setDiscountForNumberOfPassengers(basePrice * coefficientForNumberOfPassengers * discountForNumberOfPassengers);
        price.setTotalPrice(result);
        System.out.println(price);
        modify($previewFlight){setBasePrice(price)};
end


rule "calculate price of additional services"
    when
        $previewFlight: PreviewFlightEvent(basePrice != null, $flight1: flight, $customer: customer)
        $additionalServicesRequest: AdditionalServicesRequestEvent($customer.getEmail() == customer.getEmail(), flight.getId() == $flight1.getId(), $luggageWeight: luggageWeight, $isPriorityBoarding: priorityBoarding, $isSpecificSeats: specificSeats, $seats: seats)
    then
        System.out.println("calculate price of additional services");
        int numberOfPassengers = $previewFlight.getBasePrice().getNumberOfAdults() + $previewFlight.getBasePrice().getNumberOfChildren();
        System.out.println(numberOfPassengers);
        double luggagePrice = $flight1.getPriceCatalog().calculateLuggagePrice($luggageWeight / numberOfPassengers);
        double priorityBoardingPrice = ($additionalServicesRequest.isPriorityBoarding()) ? $flight1.getPriceCatalog().getPriorityBoardingPrice() * numberOfPassengers : 0;
        double specificSeatsPrice = ($additionalServicesRequest.isSpecificSeats()) ? $flight1.getPriceCatalog().getChooseSeatPrice() * $additionalServicesRequest.getSeats().size() : 0;

        AdditionalServicesPrice additionalServicesPrice = new AdditionalServicesPrice();
        additionalServicesPrice.setLuggagePrice(luggagePrice);
        additionalServicesPrice.setPriorityBoardingPrice(priorityBoardingPrice);
        additionalServicesPrice.setSpecificSeatsPrice(specificSeatsPrice);
        additionalServicesPrice.setTotalAdditionalPrice(luggagePrice + priorityBoardingPrice + specificSeatsPrice);
        System.out.println(additionalServicesPrice);
        modify($additionalServicesRequest){setAdditionalServicesPrice(additionalServicesPrice)};
end

rule "reserve ride"
    when
        $paymentRequest: FlightPaymentRequestEvent(requested == true)
    then
        System.out.println("reserve ride");
        CheckRequestValidityEvent checkRequestValidityEvent = new CheckRequestValidityEvent();
        checkRequestValidityEvent.setSeats($paymentRequest.getSeats());
        checkRequestValidityEvent.setCustomer($paymentRequest.getCustomer());
        checkRequestValidityEvent.setFlights($paymentRequest.getFlights());
        checkRequestValidityEvent.setSeatsValid(false);
        checkRequestValidityEvent.setSeatsValid(true);
        checkRequestValidityEvent.setTotalPrice($paymentRequest.getTotalPrice());
        checkRequestValidityEvent.setExecutionTime(new Date());
        checkRequestValidityEvent.setFlightPaymentRequestEvent($paymentRequest);
        insert(checkRequestValidityEvent);
end

rule "check seats"
no-loop
    when
        $c: CheckRequestValidityEvent()
        $fr: FlightPaymentRequestEvent(id == $c.getFlightPaymentRequestEvent().getId(), $frCustomer: customer)
    then
        System.out.println("check seats");
        boolean isValidSeatSelection = true;
        for (int i=0; i>$c.getFlights().size(); i++) {
            Flight flight = $c.getFlights().get(i);
            List<PlaneSeat> seats = $c.getSeats().get(i);
            for (PlaneSeat seat : seats) {
                for (FlightTickets ticket : flight.getPlaneBusyness().getTickets()) {
                    if ((ticket.getSeat().getNumber() == seat.getNumber()) && (ticket.getSeat().getSeatClass().equals(seat.getSeatClass()))) {
                        isValidSeatSelection = false;
                    }
                }

            }
        }
        if (isValidSeatSelection) {
            modify($c){setSeatsValid(true)};
        } else {
            modify($fr){setAccepted(false)};
        }
end

rule "check money and pay"
no-loop
    when
        $c: CheckRequestValidityEvent(seatsValid == true)
        $customer: Customer(email == $c.getCustomer().getEmail())
        $fr: FlightPaymentRequestEvent(id == $c.getFlightPaymentRequestEvent().getId(), $frCustomer: customer, $flights: flights)
    then
        System.out.println("check money and pay");
        double customersMoney = $c.getCustomer().getNumberOfTokens();
        double expenses = $c.getTotalPrice();
        if (customersMoney > expenses) {
            modify($c){setMoneyValid(true)};
            modify($fr){setAccepted(true)};
            $fr.getCustomer().setNumberOfTokens(customersMoney - expenses);
            Payment payment = new Payment();
            payment.setEmail($customer.getEmail());
            payment.setDeleted(false);
            payment.setExecutionTime(new Date());
            payment.setIsAcceptedPayment(true);
            payment.setTotalPrice(expenses);
            insert(payment);

            for (int i=0; i<$flights.size(); i++) {
                RemoveSeatPlaceEvent removeSeatPlaceEvent = new RemoveSeatPlaceEvent();
                removeSeatPlaceEvent.setFlight((Flight) $flights.get(i));
                removeSeatPlaceEvent.setSeats((List<PlaneSeat>) $fr.getSeats().get(i));
                removeSeatPlaceEvent.setCustomer($fr.getCustomer());
                removeSeatPlaceEvent.setExecutionTime(new Date());
                insert(removeSeatPlaceEvent);
            }
        } else {
            modify($fr){setAccepted(false)};
        }
end

//rule "remove seat places in fligts"
//    when
//        $r: RemoveSeatPlaceEvent($customer: customer)
//    then
//        System.out.println("remove seat places in fligts");
//        Set<FlightTickets> tickets = $r.getFlight().getPlaneBusyness().getTickets();
//        for (PlaneSeat seat : $r.getSeats()) {
//            FlightTickets flightTicket = new FlightTickets();
//            flightTicket.setSeat(seat);
//            flightTicket.setName($customer.getName());
//            flightTicket.setSurname($customer.getSurname());
//            flightTicket.setResponsibleUser($customer.getEmail());
//            tickets.add(flightTicket);
//        }
//        $r.getFlight().getPlaneBusyness().setTickets(tickets);
//end

