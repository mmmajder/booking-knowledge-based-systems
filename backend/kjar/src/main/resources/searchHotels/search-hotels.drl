package searchHotels

import com.ftn.sbnz.backward.model.models.hotel.*;
import java.time.LocalDate;
import java.util.Date;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Collection;
import java.time.ZoneId;
import java.text.SimpleDateFormat;

global List<Hotel> filteredHotels;

rule "Hotel"
    when
        $hotel: Hotel($name: name)
    then
        System.out.println($name);
end

rule "Filter Hotels"
when
    $searchParams: SearchHotelsParams()
    $hotel: Hotel(
        name.toLowerCase().contains($searchParams.name.toLowerCase()),
        city.toLowerCase().contains($searchParams.destination.toLowerCase()) ||
        country.toLowerCase().contains($searchParams.destination.toLowerCase()),
        rating >= $searchParams.reviewScore,
        stars memberOf $searchParams.starRating || $searchParams.starRating.size() == 0,
        distanceFromCenter >= $searchParams.distanceStart,
        distanceFromCenter <= $searchParams.distanceEnd,
        $hotel.facilities.containsAll($searchParams.facilities) || $searchParams.facilities.size() == 0
    )
then
    insert(new CalculateHotelPrice($hotel, $searchParams));
end

//
//
//rule "Available room"
//when
//    $hotel: Hotel(
//        $hotel.hotelRooms exists (HotelRoom(
//            available(startDate, endDate),
//            occupancy.adults >= numAdults,
//            occupancy.children >= numChildren
//        ))
//    )
//    accumulate(
//        $room: HotelRoom(
//            hotel == $hotel,
//            available(startDate, endDate),
//            price >= priceRangeStart,
//            price <= priceRangeEnd
//        );
//        $totalPrice: sum($room.getPrice())
//    )
//then
//    $hotel.setTotalPrice($totalPrice);
//    insert($hotel);
//end
//

rule "Calculate Hotel Price"
when
    $calculateHotelPrice: CalculateHotelPrice(
        $hotel: hotel,
        $searchParams: searchHotelsParams
    )
then
    // CALCULATE DISCOUNT
    double numOfNights = calculateNumberOfNights($searchParams.getStartDate(), $searchParams.getEndDate());
    double basicPrice = 10.0 * $hotel.getStars() * numOfNights;
    double mealPrice = ($searchParams.getNumAdults() + $searchParams.getNumChildren()) * 10.0 * numOfNights * $hotel.getStars();
    double totalPrice = basicPrice + mealPrice;

    // LAST MINUTE DISCOUNT
    int daysBeforeStay = calculateNumberOfNights(new Date(), $searchParams.getStartDate());
    boolean isHolidayPeriod = isHolidayPeriod($searchParams.getStartDate());
    double lastMinuteDiscount = holidayDiscount(daysBeforeStay, isHolidayPeriod);
    double lastMinuteDiscountAmount = totalPrice * (lastMinuteDiscount / 100);
    totalPrice -= lastMinuteDiscountAmount;

    if(totalPrice >= $searchParams.getPriceRangeStart() && $searchParams.getPriceRangeEnd() >= totalPrice) {
        filteredHotels.add($hotel);
    }
end

function Double holidayDiscount(int daysBeforeStay, boolean isHolidayPeriod) {
    if (daysBeforeStay >= 16 && daysBeforeStay <= 25) {
        if (isHolidayPeriod) {
            return 5.0;
        } else {
            return 10.0;
        }
    } else if (daysBeforeStay >= 6 && daysBeforeStay <= 15) {
        if (isHolidayPeriod) {
            return 10.0;
        } else {
            return 15.0;
        }
    } else if (daysBeforeStay <= 5) {
        if (isHolidayPeriod) {
            return 15.0;
        } else {
            return 20.0;
        }
    }
}

function boolean isHolidayPeriod(Date date) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd");
    String formattedDate = dateFormat.format(date);
    String[] holidayPeriods = {
        "01-01", // New Year's Day
        "12-25", // Christmas
        "07-04", // Independence Day
        "10-31", // Halloween
        "11-11", // Veterans Day
    };

    for (String holiday : holidayPeriods) {
        if (formattedDate.equals(holiday)) {
            return true;
        }
    }
    return false;
}

function int calculateNumberOfNights(Date startD, Date endD) {
    LocalDate startDate = startD.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    LocalDate endDate = endD.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    long daysBetween = ChronoUnit.DAYS.between(startDate, endDate);
    return (int) daysBetween;
}
