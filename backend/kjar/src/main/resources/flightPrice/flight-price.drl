package flightPrice;

import com.ftn.sbnz.backward.model.models.events.PreviewFlightEvent;
import com.ftn.sbnz.backward.model.models.events.AdditionalServicesRequestEvent;
import com.ftn.sbnz.backward.model.models.flight.SeatClass;
import com.ftn.sbnz.backward.model.models.flight.price.BasePrice;
import com.ftn.sbnz.backward.model.models.flight.price.AdditionalServicesPrice;
import com.ftn.sbnz.backward.model.models.Payment;
import com.ftn.sbnz.backward.model.models.Customer
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgram;
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgramTier;


rule "Calculate base price"
    when
        $previewFlight: PreviewFlightEvent($flight: flight, $customer: customer, $numberOfAdults: numberOfAdults, $numberOfChildren: numberOfChildren, $seatClass: seatClass)
    then
        System.out.println("Stigao u prvo prvilo");
        double basePrice = 0.0;
        switch($seatClass) {
          case ECONOMY:
            basePrice += $flight.getPriceCatalog().getEconomyPrice();
            break;
          case PREMIUM:
            basePrice += $flight.getPriceCatalog().getPremiumPrice();
            break;
          case BUSINESS:
            basePrice += $flight.getPriceCatalog().getBusinessPrice();
            break;
          case FIRST:
            basePrice += $flight.getPriceCatalog().getFirstClassPrice();
            break;
          default:
            break;
        }
        double coefficientForNumberOfPassengers = $previewFlight.getNumberOfAdults() + $previewFlight.getNumberOfChildren() * (1 - $flight.getPriceCatalog().getDiscountForChildren());
        double discountForNumberOfPassengers =  $flight.getPriceCatalog().calculateDiscountForMultipleTickets($numberOfAdults + $numberOfChildren);
        double result = basePrice * coefficientForNumberOfPassengers * (1-discountForNumberOfPassengers);
        BasePrice price = new BasePrice();
        price.setSeatPrice(basePrice);
        price.setChildrenDiscount($flight.getPriceCatalog().getDiscountForChildren() * $numberOfChildren);
        price.setNumberOfChildren($numberOfChildren);
        price.setNumberOfAdults($numberOfAdults);
        price.setDiscountForNumberOfPassengers(basePrice * coefficientForNumberOfPassengers * discountForNumberOfPassengers);
        price.setTotalPrice(result);

        modify($previewFlight){setBasePrice(price)};
end


rule "calculate price of additional services"
    when
        $previewFlight: PreviewFlightEvent(basePrice != null, $flight1: flight)
        $additionalServicesRequest: AdditionalServicesRequestEvent(flight.getId() == $flight1.getId(), $luggageWeight: luggageWeight, $isPriorityBoarding: priorityBoarding, $isSpecificSeats: specificSeats, $seats: seats)
    then
        System.out.println("Stigao u drugo prvilo");
        double luggagePrice = $flight1.getPriceCatalog().calculateLuggagePrice($luggageWeight);
        double priorityBoardingPrice = ($additionalServicesRequest.isPriorityBoarding()) ? $flight1.getPriceCatalog().getPriorityBoardingPrice() : 0;
        double specificSeatsPrice = ($additionalServicesRequest.isSpecificSeats()) ? $flight1.getPriceCatalog().getChooseSeatPrice() : 0;

        AdditionalServicesPrice additionalServicesPrice = new AdditionalServicesPrice();
        additionalServicesPrice.setLuggagePrice(luggagePrice);
        additionalServicesPrice.setPriorityBoardingPrice(priorityBoardingPrice);
        additionalServicesPrice.setSpecificSeatsPrice(specificSeatsPrice);
        additionalServicesPrice.setTotalAdditionalPrice(luggagePrice + priorityBoardingPrice + specificSeatsPrice);

        modify($additionalServicesRequest){setAdditionalServicesPrice(additionalServicesPrice)};
end

//rule "Loyalty discount"
//    when
//        $c: Customer($email: email)
//        AdditionalServicesRequestEvent(additionalServicesPrice!=null)
//        Number(doubleValue >= 500 && doubleValue < 1000) from accumulate(
//            $p: Payment(email == $email, $totalPrice: totalPrice)
//            over window: time(129600m),
//            sum($totalPrice)
//        )
//    then
//        System.out.println("Trece pravilo se aktiviralo");
//        LoyaltyProgram loyaltyProgram = new LoyaltyProgram();
//        loyaltyProgram.setDiscount(5);
//        switch("BRONZE") {
//          case "BRONZE":
//            loyaltyProgram.setTier(LoyaltyProgramTier.BRONZE);
//            break;
//          case "SILVER":
//            loyaltyProgram.setTier(LoyaltyProgramTier.SILVER);
//            break;
//          case "GOLD":
//            loyaltyProgram.setTier(LoyaltyProgramTier.GOLD);
//            break;
//          default:
//            break;
//        }
//        modify($c){setLoyaltyProgram(loyaltyProgram);}
//end
