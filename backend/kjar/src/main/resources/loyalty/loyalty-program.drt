template header
minMoney
maxMoney
timeInMonths
discount
category

package loyalty;

import com.ftn.sbnz.backward.model.models.Payment;
import com.ftn.sbnz.backward.model.models.Customer;
import com.ftn.sbnz.backward.model.models.Customer;
import com.ftn.sbnz.backward.model.models.events.AdditionalServicesRequestEvent;
import com.ftn.sbnz.backward.model.models.events.CalculateLoyaltyEvent;
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgram;
import com.ftn.sbnz.backward.model.models.flight.LoyaltyProgramTier;

template "loyalty-rools"

rule "Loyalty discount_@{row.rowNumber}"
lock-on-active
    when
        $cl: CalculateLoyaltyEvent()
        $c: Customer(email == $cl.getCustomer().getEmail())
        Number(doubleValue >= @{minMoney} && doubleValue < @{maxMoney}) from accumulate(
            $p: Payment(email == $c.getEmail(), $totalPrice: totalPrice)
            over window: time(129600, TimeUnit.MILLISECONDS),
            sum($totalPrice)
        )
    then
        System.out.println("EVO ME");
        LoyaltyProgram loyaltyProgram = new LoyaltyProgram();
        loyaltyProgram.setDiscount(@{discount});
        switch("@{category}") {
          case "BRONZE":
            loyaltyProgram.setTier(LoyaltyProgramTier.BRONZE);
            break;
          case "SILVER":
            loyaltyProgram.setTier(LoyaltyProgramTier.SILVER);
            break;
          case "GOLD":
            loyaltyProgram.setTier(LoyaltyProgramTier.GOLD);
            break;
          default:
            break;
        }
        System.out.println($c);
        Customer updatedCustomer = $cl.getCustomer();
        updatedCustomer.setLoyaltyProgram(loyaltyProgram);
        modify($cl){setCustomer(updatedCustomer);}
        modify($c){setLoyaltyProgram(loyaltyProgram);}
        System.out.println($cl);
        System.out.println($c);
end

end template

