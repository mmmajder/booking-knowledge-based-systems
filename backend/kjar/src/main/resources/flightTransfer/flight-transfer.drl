package flightTransfer;
import com.ftn.sbnz.backward.model.models.flight.Airport;
import com.ftn.sbnz.backward.model.models.flight.Flight;
import com.ftn.sbnz.backward.model.models.flight.FlightRequest;
import com.ftn.sbnz.backward.model.models.flight.NumberOfStops;
import java.time.Instant
import java.time.Duration;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator
import java.util.Objects;

global java.util.List order;
global java.util.List startPositions;

query isConnectedTo(Airport startLocation, Airport endLocation, boolean isFirst, Instant departureTime, Instant arrivalTime, Object connected)
    $f1: Flight( startLocation, endLocation, endDepartureTime, endArrivalTime; )
    and eval(isWithinRange(endDepartureTime, endArrivalTime, departureTime, arrivalTime, isFirst))
    and eval(saveOrder(connected, order, endLocation))
    or
    ( $f: Flight( startLocation, z, followingDepartureTime, followingArrivalTime; )
    and eval(startLocation.getId()!= endLocation.getId())
    and eval(updateRoutes(departureTime, arrivalTime, isFirst, order, $f, connected))
    and isConnectedTo( startLocation: z, endLocation: endLocation, isFirst: false, departureTime: followingDepartureTime, arrivalTime: followingArrivalTime, connected: connected ) )
end

function boolean saveOrder(Object connected, List order, Airport endLocation) {
    if (connected instanceof List) {
        List<List<Flight>> orderFlight = (List<List<Flight>>) connected;
        if (order.size()==0) {
            for (List<Flight> flightList : orderFlight) {
                List<Flight> orderListItem = new ArrayList<>();
                int depth = 0;
                for (Flight flight : flightList) {
                    if (flight.getArrivalAirport().getId() == endLocation.getId()) {
                        orderListItem.add(flight);
                        order.add(orderListItem);
                        break;
                    } else {
                        orderListItem.add(flight);
                    }
                }
            }
        }
    }
    return true;
}

function boolean updateRoutes(Instant departureTime, Instant arrivalTime, boolean isFirst, List order, Flight followingFlight, Object connected) {
    if (isWithinRange(followingFlight.getDepartureTime(), followingFlight.getArrivalTime(), departureTime, arrivalTime, isFirst)) {
        List<List<Flight>> orderFlight = (List<List<Flight>>) connected;
        List<List<Flight>> newRoutes = new ArrayList<>();

        // ako let krece sa pocetne lokacije, kreiraj novu rutu
        if (isFirst) {
            List<Flight> newRoute = new ArrayList<>();
            newRoute.add(followingFlight);
            orderFlight.add(newRoute);
            System.out.println("Dodata nova ruta");
            System.out.println(orderFlight);
        }
        // ako ne, updajtuj postojece rute
        else {
            for (List<Flight> flights : orderFlight) {

                // za svali let u ruti
                for (int i=0; i<flights.size(); i++) {
                    Flight flight = flights.get(i);

                    // proveri da li se dati let zavrsava tamo gde novi treba da pocne
                    if (flight.getArrivalAirport().getCode().equals(followingFlight.getDepartureAirport().getCode())) {

                        // i ako se vreme poklapa
                        if (isWithinRange(followingFlight.getDepartureTime(), followingFlight.getArrivalTime(), flight.getDepartureTime(), flight.getArrivalTime(), i==0)) {

                            // ako nije na poslednjoj poziciji u ruti, kreiraj novu rutu sa predjasnjim letovima
                            if (i!=flights.size()-1) {
                                List<Flight> newList = new ArrayList<>();

                                // ruta ce imati sve letove pre njega
                                for (int j=0; j<=i; j++) {
                                    newList.add(flights.get(j));
                                }

                                // i novi let
                                newList.add(followingFlight);

                                newRoutes.add(newList);
                            }
                            else {
                                // ako je novi let posle poslednjeg leta u nizu, dodaj let na kraj niza
                                flights.add(followingFlight);
                            }
                        }
                    }

                }
            }

            System.out.println("Dodate vrednosti");
            System.out.println(orderFlight);

            // provera da li nova ruta koja se dodaje vec postoji u postojecim rutama
            for (List<Flight> newRouteFlights : newRoutes) {
                boolean isDuplicate = false;
                for (List<Flight> orderList : orderFlight) {
                    boolean isOrderElementDuplicate = true;
                    for (Flight updateElem : newRouteFlights) {
                        boolean isMatch = false;
                        for (Flight orderElem : orderList) {
                            if (Objects.equals(orderElem.getId(),updateElem.getId())) {
                                isMatch = true;
                                break;
                            }
                        }
                        if (!isMatch) {
                            isOrderElementDuplicate = false;
                        }
                    }
                    if (isOrderElementDuplicate) {
                        isDuplicate = true;
                    }
                }
                if (!isDuplicate) {
                    orderFlight.add(newRouteFlights);
                }
            }

            System.out.println("Uklonjene vrednosti");
            System.out.println(orderFlight);
        }
        return true;
    }
    return false;
}

function boolean isWithinRange(Instant followingDepartureTime, Instant followingArrivalTime, Instant departureTime, Instant arrivalTime, boolean isFirst) {
    if (isFirst) {
        Instant minTime = departureTime.minus(Duration.ofMinutes(1));
        Instant maxTime = departureTime.plus(Duration.ofHours(24));
        return followingDepartureTime.isAfter(minTime) && followingDepartureTime.isBefore(maxTime);
    } else {
        Instant minTime = arrivalTime.plus(Duration.ofMinutes(30));
        Instant maxTime = arrivalTime.plus(Duration.ofHours(5));
        return followingDepartureTime.isAfter(minTime) && followingDepartureTime.isBefore(maxTime);
    }
}

rule "check connection"
lock-on-active
when
    $fr: FlightRequest($startLocation: departureAirport, $endLocation: arrivalAirport, $departureTime: departureTime)
    isConnectedTo(startLocation: $startLocation, endLocation: $endLocation, isFirst: true, departureTime: $departureTime, arrivalTime: $departureTime, connected: startPositions)
then
    System.out.println("----------");
    System.out.println("Flight request");
    System.out.println($startLocation.getCode());
    System.out.println($endLocation.getCode());
    System.out.println($departureTime);
    System.out.println(order);
    System.out.println("----------");

    modify($fr){setRoutes(order);}

end


rule "check number of stops"
no-loop
when
    $fr: FlightRequest(routes != null, $numberOfStops: numberOfStops)
then
    if ($numberOfStops.equals(NumberOfStops.NONE)) {
        List<List<Flight>> newList = new ArrayList<>();
        for (List<Flight> route : $fr.getRoutes()) {
            if (route.size() == 1) {
                newList.add(route);
            }
        }
        modify($fr){setRoutes(newList);}
    }

    if ($numberOfStops.equals(NumberOfStops.ONE_MAX)) {
            List<List<Flight>> newList = new ArrayList<>();
            for (List<Flight> route : $fr.getRoutes()) {
                if (route.size() < 3) {
                    newList.add(route);
                }
            }
            modify($fr){setRoutes(newList);}
        }
    System.out.println($fr.getRoutes());

end
